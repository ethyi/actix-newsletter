[package]
name = "newsletter"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
# We could use any path here, but we are following the community convention
# We could specify a library name using the `name` field. If unspecified,
# cargo will default to `package.name`, which is what we want.
path = "src/lib.rs"

[[bin]]
path = "src/main.rs"
name = "newsletter"

[dependencies]
actix-web = "4"
tokio = { version = "1", features = ["macros", "rt-multi-thread"] }
serde = { version ="1", features = ["derive"]}
config = "0.11"
uuid = { version = "0.8.1", features = ["v4"] }
chrono = "0.4.15"
# logging functionality
tracing = { version = "0.1", features = ["log"] }
tracing-subscriber = { version = "0.3", features = ["registry", "env-filter"] }
tracing-bunyan-formatter = "0.3"
tracing-log = "0.1"
once_cell = "1" # to handle single initialization
secrecy = { version = "0.8", features = ["serde"] } # specifies which fields should be secret
tracing-actix-web = "0.5"
# handle integer parsing
serde-aux="3"
# handle grapheme length
unicode-segmentation = "1"
# email validator
validator = "0.14"
# to talk to REST API
reqwest = { version = "0.11", default-features = false, features = ["json", "rustls-tls"] }
# generate tokens
rand = { version = "0.8", features=["std_rng"] }
# dynamic errors
thiserror = "1"
anyhow = "1"




[dev-dependencies]
# better error messages, especially with Option and Result
claim = "0.5"
# generate random valid emails
fake = "~2.3"
# property based testing, primarily for email validation
quickcheck = "0.9.2"
quickcheck_macros = "0.9.1"
# testing http requests
tokio = { version = "1", features = ["rt", "macros"] }
wiremock ="0.5"
# json deserialization
serde_json = "1"
# extract parts of html body in testing
linkify = "0.8"



[dependencies.sqlx]
version = "0.5.7"
default-features = false
features = [
"runtime-actix-rustls",#use actix runtime
"macros", # sqlx::query!
"postgres", # postgres-specific functionality
"uuid", # uuid in sql
"chrono", # map sql time to Rust DataTime type
"migrate", # manage migrations
"offline" # manage how the database can be accessed from docker
]
